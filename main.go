package main

import (
	"fmt"
	"io"
	"log"
	"modules/app/models"
	"net/http"
	"os"
	"regexp"
	"strings"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api"
	"github.com/google/uuid"
	"github.com/joho/godotenv"
	_ "github.com/mattn/go-sqlite3"
)

var uploadPath string

func main() {
	err := godotenv.Load()
	if err != nil {
		log.Println("Error loading .env file")
	}

	tgToken := os.Getenv("TG_TOKEN")
	uploadPath = os.Getenv("UPLOAD_PATH")

	db, err := models.NewDatabase()
	if err != nil {
		log.Println(err)
	}
	defer db.Close()
	db.CreateTable()

	bot, err := tgbotapi.NewBotAPI(tgToken)
	if err != nil {
		log.Println(err)
	}

	bot.Debug = true

	log.Printf("Authorized on account %s", bot.Self.UserName)

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates, err := bot.GetUpdatesChan(u)
	var chatID int64
	for update := range updates {
		if update.Message == nil { // –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –Ω–µ —è–≤–ª—è—é—â–∏–µ—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
			continue
		}

		chatID = update.Message.Chat.ID
		keyboard := models.GetKb(chatID, db)

		text := update.Message.Text
		text_lower := strings.ToLower(text)
		msg := tgbotapi.NewMessage(chatID, "")
		msg.ParseMode = "HTML"
		msg.ReplyMarkup = keyboard
		msg.DisableWebPagePreview = true

		if update.Message.IsCommand() || update.CallbackQuery != nil {
			switch update.Message.Command() {
			case "start", "help":
				msg.Text = "<b>–°–ü–†–ê–í–ö–ê</b>\n\n–í—Å—Ç–∞–≤—å—Ç–µ url –ª—é–±–æ–≥–æ Youtube-—Ä–æ–ª–∏–∫–∞ –∏ –ø–æ–ª—É—á–∏—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É –µ–≥–æ –ø—Ä–µ–≤—å—é."
				if update.Message.Command() == "start" {
					db.SaveChatId(update, bot)
				}
			default:
				msg.Text = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ –≤–≤–µ–¥–∏—Ç–µ <b>–ü–æ–≥–æ–¥–∞ –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫</b>, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É."
				db.SaveError(update, text)
			}
			bot.Send(msg)
		} else if strings.Contains(text_lower, "start") || strings.Contains(text_lower, "–ø–æ–º–æ—â—å") {
			msg.Text = "<b>–°–ü–†–ê–í–ö–ê</b>\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç–æ–º—É –±–æ—Ç—É —Å—Å—ã–ª–∫—É –ª—é–±–æ–≥–æ Youtube-—Ä–æ–ª–∏–∫–∞ –∏ –ø–æ–ª—É—á–∏—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É –µ–≥–æ –ø—Ä–µ–≤—å—é."
			bot.Send(msg)
			continue
		} else if strings.Contains(text_lower, "–Ω–∞—à–∏ –ø—Ä–æ–µ–∫—Ç—ã") {
			msg.Text = "<b>–ù–ê–®–ò –ü–†–û–ï–ö–¢–´</b>\n\n"
			msg.Text += `üëâ <a href="https://ne-propusti.ru">–ù–ï-–ü–†–û–ü–£–°–¢–ò.–†–£</a> - –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ü–µ–Ω –Ω–∞ –í–µ–ª–¥–±–µ—Ä–∏—Å –∫–∞–∂–¥—ã–π —á–∞—Å —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏.` + "\n"
			msg.Text += "üëâ @ShkolaPozitiva - –∫–∞–Ω–∞–ª –®–∫–æ–ª–∞–ü–æ–∑–∏—Ç–∏–≤–∞. –õ—É—á—à–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –æ –∫–æ–Ω—Å–ø–∏—Ä–æ–ª–æ–≥–∏–∏ –∏ –º–∏—Ä–µ.\n"
			msg.Text += "üëâ @Theweather2023bot - –ø–æ–≥–æ–¥–Ω—ã–π –±–æ—Ç. –ü–æ–≥–æ–¥–∞ –≤ –ª—é–±–æ–º –≥–æ—Ä–æ–¥–µ –º–∏—Ä–∞.\n"
			msg.Text += "üëâ @Moondays2024_bot - –±–æ—Ç —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –ª—É–Ω–Ω—ã—Ö –¥–Ω–µ–π, –∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–æ–≤–æ–ª—É–Ω–∏–π –∏ –ø–æ–ª–Ω–æ–ª—É–Ω–∏–π.\n"
			msg.Text += "üëâ @GetYoutubeImgBot - –±–æ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–≤—å—é-–∫–∞—Ä—Ç–∏–Ω–æ–∫ –∏–∑ Youtube.\n"
			msg.Text += "\n<b>–°–ü–†–ê–í–ö–ê</b>\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç–æ–º—É –±–æ—Ç—É —Å—Å—ã–ª–∫—É –ª—é–±–æ–≥–æ Youtube-—Ä–æ–ª–∏–∫–∞ –∏ –ø–æ–ª—É—á–∏—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É –µ–≥–æ –ø—Ä–µ–≤—å—é."
			bot.Send(msg)
			continue
		} else {
			videoID, err := extractYouTubeVideoID(text)
			if err != nil {
				log.Println(err)
				db.SaveError(update, text)
				msg.Text = "<b>–û–®–ò–ë–ö–ê</b>. –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∫–∞—Ä—Ç–∏–Ω–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ."
				bot.Send(msg)
				continue
			}

			videoURL := fmt.Sprintf("https://img.youtube.com/vi/%s/maxresdefault.jpg", videoID)
			imageFileName, err := downloadImage(videoURL, videoID)
			if err != nil {
				msg.Text = "<b>–û–®–ò–ë–ö–ê</b>. –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É."
				bot.Send(msg)
				log.Println(err)
			} else {
				photo := tgbotapi.NewPhotoUpload(chatID, imageFileName)
				photo.Caption = fmt.Sprintf("\n–°—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º –∫–∞—á–µ—Å—Ç–≤–µ:\n%s\n", videoURL)
				bot.Send(msg)

				_, err = bot.Send(photo)
				if err != nil {
					log.Println(err)
				}

				// –£–¥–∞–ª–∏—Ç—å —Å–∫–∞—á–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
				os.Remove(imageFileName)
			}
		}
	}
}

func downloadImage(url string, ytID string) (string, error) {
	// –û—Ç–ø—Ä–∞–≤–∏—Ç—å HTTP-–∑–∞–ø—Ä–æ—Å
	response, err := http.Get(url)
	if err != nil {
		return "", err
	}
	defer response.Body.Close()

	// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
	if response.StatusCode != http.StatusOK {
		return "", fmt.Errorf("–ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: %d", response.StatusCode)
	}

	// –°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
	imageFileName := generateUniqueFileName("jpg")
	imagePath := uploadPath + "/" + imageFileName
	file, err := os.Create(imagePath)
	if err != nil {
		return "", fmt.Errorf("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª")
	}
	defer file.Close()

	// –ó–∞–ø–∏—Å–∞—Ç—å —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ –≤ —Ñ–∞–π–ª
	_, err = io.Copy(file, response.Body)
	if err != nil {
		return "", err
	}

	// fmt.Printf("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ %s\n", destination)
	return imagePath, nil
}

func generateUniqueFileName(extension string) string {
	uuid := uuid.New()
	return fmt.Sprintf("%s.%s", strings.Replace(uuid.String(), "-", "", -1), extension)
}

func extractYouTubeVideoID(url string) (string, error) {
	// –ü–∞—Ç—Ç–µ—Ä–Ω —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –≤–∏–¥–µ–æ
	pattern := `(?:https?:\/\/)?(?:www\.)?(?:youtube\.com\/(?:[^\/\n\s]+\/\S+\/|(?:v|e(?:mbed)?)\/|\S*?[?&]v=)|youtu\.be\/)([a-zA-Z0-9_-]{11})`
	re := regexp.MustCompile(pattern)

	// –ù–∞–π—Ç–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ URL
	matches := re.FindStringSubmatch(url)

	// –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ, –≤–µ—Ä–Ω—É—Ç—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤–∏–¥–µ–æ
	if len(matches) >= 2 {
		return matches[1], nil
	} else {
		urlFinded, err := extractYouTubeVideoID2(url)
		if err == nil {
			return urlFinded, nil
		}
	}

	// –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –≤–µ—Ä–Ω—É—Ç—å –æ—à–∏–±–∫—É
	return "", fmt.Errorf("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤–∏–¥–µ–æ –∏–∑ URL")
}

func extractYouTubeVideoID2(url string) (string, error) {
	// –ü–∞—Ç—Ç–µ—Ä–Ω —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –≤–∏–¥–µ–æ
	pattern := `(?:https?:\/\/)?(?:www\.)?youtube\.com\/live\/([^\/\?\&]+)`
	re := regexp.MustCompile(pattern)

	// –ù–∞–π—Ç–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ URL
	matches := re.FindStringSubmatch(url)

	// –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ, –≤–µ—Ä–Ω—É—Ç—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤–∏–¥–µ–æ
	if len(matches) >= 2 {
		return matches[1], nil
	}

	// –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –≤–µ—Ä–Ω—É—Ç—å –æ—à–∏–±–∫—É
	return "", fmt.Errorf("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤–∏–¥–µ–æ –∏–∑ URL")
}
